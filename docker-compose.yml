
services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: globalnews
      POSTGRES_PASSWORD: dev_password_change_in_prod
      POSTGRES_DB: globalnews
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U globalnews -d globalnews"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    ports:
      - "3333:3333"
    environment:
      - NODE_ENV=development
      - PORT=3333
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=globalnews
      - DB_PASSWORD=dev_password_change_in_prod
      - DB_NAME=globalnews
      - DATABASE_URL=postgresql://globalnews:dev_password_change_in_prod@db:5432/globalnews
      - LLM_PROVIDER=custom
      - LLM_BASE_URL=http://llm-api:8000
      - LLM_MODEL=llama3-8b
      - LLM_MAX_TOKENS=1000
      - LLM_TEMPERATURE=0.3
      - TRANSLATION_SERVICE_URL=http://llm-api:8000
    depends_on:
      db:
        condition: service_healthy
      llm-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3333/healthz', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  llm-api:
    build:
      context: ./services/llm-api
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      # Mount your local models directory here
      - ./models:/app/models:ro
    environment:
      - PYTHONPATH=/app
      - TOKENIZERS_PARALLELISM=false
      - TRANSFORMERS_CACHE=/app/models/.cache
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - BASE_API=http://api:3333
    depends_on:
      - api


volumes:
  postgres_data:

networks:
  default:
    name: globalnews_network